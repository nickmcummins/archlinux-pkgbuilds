Index: src/osgEarth/GEOS.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/osgEarth/GEOS.cpp	(revision 42088512f86fac7b606a12eae13babd3a4d73f59)
+++ src/osgEarth/GEOS.cpp	(date 1583869250945)
@@ -48,7 +48,7 @@
 
 namespace
 {
-    geom::CoordinateSequence*
+    std::unique_ptr<geom::CoordinateSequence>
     vec3dArray2CoordSeq( const Geometry* input, bool close, const geom::CoordinateSequenceFactory* factory )
     {   
         bool needToClose = close && input->size() > 2 && input->front() != input->back();
@@ -63,7 +63,7 @@
         {
             coords->push_back( coords->front() );
         }
-        geom::CoordinateSequence* seq = factory->create( coords );
+        std::unique_ptr<geom::CoordinateSequence> seq = factory->create( coords );
 
         return seq;
     }
@@ -107,7 +107,7 @@
         else
         {
             // any other type will at least contain points:
-            geom::CoordinateSequence* seq = 0L;
+            std::unique_ptr<geom::CoordinateSequence> seq;
             try
             {
                 switch( input->getType() )
@@ -119,29 +119,29 @@
                 case Geometry::TYPE_POINT:
                 case Geometry::TYPE_POINTSET:
                     seq = vec3dArray2CoordSeq( input, false, f->getCoordinateSequenceFactory() );
-                    if ( seq ) output = f->createPoint( seq );
+                    if ( seq ) output = f->createPoint( seq.get() );
                     break;
 
                 case Geometry::TYPE_LINESTRING:
                     seq = vec3dArray2CoordSeq( input, false, f->getCoordinateSequenceFactory() );
-                    if ( seq ) output = f->createLineString( seq );
+                    if ( seq ) output = f->createLineString( seq.get() );
                     break;
 
                 case Geometry::TYPE_RING:
                     seq = vec3dArray2CoordSeq( input, true, f->getCoordinateSequenceFactory() );
-                    if ( seq ) output = f->createLinearRing( seq );
+                    if ( seq ) output = f->createLinearRing( seq.get() );
                     break;
 
                 case Geometry::TYPE_POLYGON:
                     seq = vec3dArray2CoordSeq( input, true, f->getCoordinateSequenceFactory() );
                     geom::LinearRing* shell = 0L;
                     if ( seq )
-                        shell = f->createLinearRing( seq );
+                        shell = f->createLinearRing( seq.get() );
 
                     if ( shell )
                     {
                         const Polygon* poly = static_cast<const Polygon*>(input);
-                        std::vector<geom::Geometry*>* holes = poly->getHoles().size() > 0 ? new std::vector<geom::Geometry*>() : 0L;
+                        std::vector<geom::LinearRing*>* holes = poly->getHoles().size() > 0 ? new std::vector<geom::LinearRing*>() : 0L;
                         if (holes)
                         {
                             for( RingCollection::const_iterator r = poly->getHoles().begin(); r != poly->getHoles().end(); ++r )
@@ -151,7 +151,7 @@
                                 {
                                     if (hole->getGeometryTypeId() == geos::geom::GEOS_LINEARRING)
                                     {
-                                        holes->push_back(hole);
+                                        holes->push_back(dynamic_cast<geom::LinearRing*>(hole));
                                     }
                                     else
                                     {
