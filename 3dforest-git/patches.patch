Index: CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CMakeLists.txt	(revision debb055558deacc14b8174cf222ea66d6c1a24ba)
+++ CMakeLists.txt	(date 1596583961821)
@@ -30,6 +30,8 @@
 include_directories(${libLAS_INCLUDE_DIRS})
 target_link_libraries(3DForest ${libLAS_LIBRARIES})
 
+find_package(MPI REQUIRED)
+
 #dependencies - VTK
 find_package(VTK 8.1 REQUIRED)
 include_directories(${VTK_INCLUDE_DIRS})
@@ -46,7 +48,6 @@
 find_package(Boost 1.72 COMPONENTS program_options thread system REQUIRED)
 include_directories( ${Boost_INCLUDE_DIR} )
 target_link_libraries(3DForest ${Boost_PROGRAM_OPTIONS_LIBRARY})
-
 find_package(OpenMP)
 if (OPENMP_FOUND)
     set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
Index: sourceCode/mainwindow.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sourceCode/mainwindow.h	(revision debb055558deacc14b8174cf222ea66d6c1a24ba)
+++ sourceCode/mainwindow.h	(date 1596596273169)
@@ -17,7 +17,8 @@
 #define MAINWINDOW_H_INCLUDED
 
 #include <QVTKOpenGLWidget.h>
-#include <QVTKWidget.h>
+#include <QVTKOpenGLNativeWidget.h>
+#include <vtkRenderWindow.h>
 #include <QtWidgets/QMainWindow>
 #include "gui.h"
 #include "project.h"
@@ -492,7 +493,7 @@
 
 //QVTKWIDGET - display and hide clouds
   //QVTKWidget *qvtkwidget;
-    QVTKOpenGLWidget *qvtkwidget;
+    QVTKOpenGLStereoWidget *qvtkwidget;
     /**< Define QVTKWidget */
   //Visualizer *m_vis;
     pcl::visualization::PCLVisualizer *m_vis; /**< Visualizer */
Index: sourceCode/skeleton.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sourceCode/skeleton.cpp	(revision debb055558deacc14b8174cf222ea66d6c1a24ba)
+++ sourceCode/skeleton.cpp	(date 1596588816203)
@@ -573,7 +573,7 @@
         std::chrono::system_clock::to_time_t(now);
        // start = std::time(nullptr);
         // set octree search
-        boost::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (sets.at(bigSegmentID)));
+        std::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (sets.at(bigSegmentID)));
        // std::cout<< "veliksot indices: "<< sets.at(bigSegmentID).size()<<"\n";
         search.setInputCloud (cloud, indicesptr);
         search.addPointsFromInputCloud ();
Index: sourceCode/segmentation.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sourceCode/segmentation.cpp	(revision debb055558deacc14b8174cf222ea66d6c1a24ba)
+++ sourceCode/segmentation.cpp	(date 1596588771210)
@@ -601,7 +601,7 @@
             indices.insert(indices.end(), m_clusters.at(element.at(a)).begin(),m_clusters.at(element.at(a)).end());
     }
     
-    boost::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (indices));
+    std::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (indices));
     pcl::ExtractIndices<pcl::PointXYZI> extract;
     extract.setInputCloud (m_vegetation->get_Cloud());
     extract.setIndices (indicesptr);
@@ -631,7 +631,7 @@
     if(m_vegetation->get_Cloud()->points.size() < indices.size()  || indices.size() ==0)
         return;
     
-    boost::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (indices));
+    std::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (indices));
     pcl::ExtractIndices<pcl::PointXYZI> extract;
     extract.setInputCloud (m_vegetation->get_Cloud());
     extract.setIndices (indicesptr);
Index: sourceCode/alphaShapes.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sourceCode/alphaShapes.cpp	(revision debb055558deacc14b8174cf222ea66d6c1a24ba)
+++ sourceCode/alphaShapes.cpp	(date 1595634011135)
@@ -1,5 +1,5 @@
 #include "alphaShapes.h"
-#include <QVTKWidget.h>
+#include <QVTKOpenGLNativeWidget.h>
 #include <vtkInteractorStyle.h>
 #include <vtkPolyDataAlgorithm.h>
 #include <vtkPoints.h>
Index: sourceCode/project.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sourceCode/project.cpp	(revision debb055558deacc14b8174cf222ea66d6c1a24ba)
+++ sourceCode/project.cpp	(date 1595634118238)
@@ -24,7 +24,7 @@
 #include <pcl/io/vtk_io.h>
 #include <iostream>
 //#include <string>
-#include <QtCore/QString.h>
+#include <QtCore/qstring.h>
 #include <QtWidgets/QMessageBox>
 #include <QtWidgets/QCheckBox>
 #include <QtWidgets/QRadioButton>
Index: sourceCode/mainwindow.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sourceCode/mainwindow.cpp	(revision debb055558deacc14b8174cf222ea66d6c1a24ba)
+++ sourceCode/mainwindow.cpp	(date 1596600232935)
@@ -104,16 +104,16 @@
     setWindowTitle ( tr("3D Forest - Forest lidar data processing tool") );
 
 //QVTKwidget - visualizer
-    qvtkwidget = new QVTKOpenGLWidget(this);
+    qvtkwidget = new QVTKOpenGLStereoWidget(this);
 
-    auto renderer = vtkSmartPointer<vtkRenderer >::New();
-    auto renderWindow = vtkSmartPointer<vtkGenericOpenGLRenderWindow >::New();
+    vtkSmartPointer<vtkRenderer> renderer = vtkSmartPointer<vtkRenderer>::New();
+    vtkSmartPointer<vtkRenderWindow> renderWindow = vtkSmartPointer<vtkRenderWindow>::New();
 
     renderWindow->AddRenderer(renderer);
-    
+
     m_vis = new pcl::visualization::PCLVisualizer(renderer, renderWindow, "data viewer", true);
     m_vis->setShowFPS(false);
-    qvtkwidget->SetRenderWindow(m_vis->getRenderWindow());
+    qvtkwidget->setRenderWindow(m_vis->getRenderWindow());
     coordianteAxes();
     setCentralWidget(qvtkwidget);
     qvtkwidget->show();
@@ -7136,7 +7136,7 @@
     auto name = (m_cloud->get_name().toStdString());
     auto indices = event.getPointsIndices(name);
 
-    boost::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (indices));
+    std::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (indices));
     pcl::PointCloud<pcl::PointXYZI>::Ptr cloud2 (new pcl::PointCloud<pcl::PointXYZI>);
     pcl::PointCloud<pcl::PointXYZI>::Ptr cloud1 (new pcl::PointCloud<pcl::PointXYZI>);
     undopoint.push_back(indices.size());
Index: sourceCode/terrain.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sourceCode/terrain.cpp	(revision debb055558deacc14b8174cf222ea66d6c1a24ba)
+++ sourceCode/terrain.cpp	(date 1596590171924)
@@ -112,7 +112,7 @@
   ocsearch.deleteTree();
  // ocs.voxelSearch(voxels.at(q),low_voxels_indices);
 
-    boost::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (low_voxels_indices));
+    std::shared_ptr<const pcl::Indices> indicesptr (new std::vector<int> (low_voxels_indices));
     pcl::ExtractIndices<pcl::PointXYZI> extract;
      // Extract the inliers
     extract.setInputCloud (input);
@@ -170,7 +170,7 @@
       }
     }
 emit percentage( 60);
-    boost::shared_ptr<std::vector<int> > indices_ground (new std::vector<int> (pointID_ground));
+    std::shared_ptr<std::vector<int> > indices_ground (new std::vector<int> (pointID_ground));
     pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_ground(new pcl::PointCloud<pcl::PointXYZI>);
     pcl::ExtractIndices<pcl::PointXYZI> extract;
        // Extract the inliers
@@ -213,7 +213,7 @@
     }
 emit percentage( 80);
     pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_vege(new pcl::PointCloud<pcl::PointXYZI>);
-    boost::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (pointIDS));
+    std::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (pointIDS));
     pcl::ExtractIndices<pcl::PointXYZI> e;
        // Extract the inliers
     e.setInputCloud (m_baseCloud->get_Cloud());
@@ -368,7 +368,7 @@
 
   // jeste by to chtelo trochu prefiltrovat aby byl opravdu jen voxely terenu
 
-  boost::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (low_voxels));
+  std::shared_ptr<std::vector<int> > indicesptr (new std::vector<int> (low_voxels));
   pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_vege (new pcl::PointCloud<pcl::PointXYZI>);
   pcl::PointCloud<pcl::PointXYZI>::Ptr cloud_terrain (new pcl::PointCloud<pcl::PointXYZI>);
   pcl::ExtractIndices<pcl::PointXYZI> extract;
Index: sourceCode/gui.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sourceCode/gui.cpp	(revision debb055558deacc14b8174cf222ea66d6c1a24ba)
+++ sourceCode/gui.cpp	(date 1595634374721)
@@ -17,6 +17,7 @@
 #include "cloud.h"
 #include <vtkAxesActor.h>
 #include <vtkOrientationMarkerWidget.h>
+#include <vtkRenderWindow.h>
 #include <QtWidgets/QScrollArea>
 #include <QtWidgets/QPushButton>
 #include <QtWidgets/QFileDialog>
