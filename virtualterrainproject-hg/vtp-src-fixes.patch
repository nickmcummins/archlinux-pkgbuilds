Index: TerrainApps/CManager/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/CManager/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/CManager/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -100,5 +100,7 @@
 	include_directories(${ZLIB_INCLUDE_DIR})
 endif(ZLIB_FOUND)
 
+find_library(SQUISH_LIBRARY squish DOC "Path to squish library")
+target_link_libraries(CManager ${SQUISH_LIBRARY})
 
 
Index: TerrainApps/Enviro/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/Enviro/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/Enviro/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -33,11 +33,13 @@
 install(TARGETS Enviro RUNTIME DESTINATION bin
                        BUNDLE DESTINATION bin)
 
+install(TARGETS envdlg LIBRARY DESTINATION lib)
+
 # Special versions of Enviro can be created by using the same files with a different frame
 # include("Pathfinder/CMakeLists.txt")
 
 # Internal dependencies for this target
-target_link_libraries(Enviro envdlg wxosg vtlib vtui minidata vtdata xmlhelper)
+target_link_libraries(Enviro envdlg wxosg vtlib vtui minidata vtdata xmlhelper unzip)
 
 if (UNIX)
     target_link_libraries(Enviro X11)
@@ -63,6 +65,10 @@
 	target_link_libraries(Enviro ${wxWidgets_LIBRARIES})
 endif(wxWidgets_FOUND)
 
+if(MINIZIP_FOUND)
+	target_link_libraries(Enviro ${MINIZIP_LIBRARY})
+endif (MINIZIP_FOUND)
+
 if(GDAL_FOUND)
 	target_link_libraries(Enviro ${GDAL_LIBRARIES})
 endif (GDAL_FOUND)
@@ -111,6 +117,9 @@
 	target_link_libraries(Enviro ${OPENGL_glu_LIBRARY})
 endif(OPENGL_glu_LIBRARY)
 
+find_library(SQUISH_LIBRARY squish DOC "Path to squish library")
+target_link_libraries(Enviro ${SQUISH_LIBRARY})
+
 # Set up include directories for all targets at this level
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/wx/icons)
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/wx/bitmap)
Index: TerrainApps/fltkSimple/Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/fltkSimple/Makefile	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/fltkSimple/Makefile	(revision 58+:977e8908786d+)
@@ -50,7 +50,7 @@
 LIBS   = -lvtosg -lvtdata \
          -lgdal -losgDB -losgUtil -losgText -losgParticle -losg \
 	 -lxmlhelper -lunzip $(MINI_LIB) \
-         $(GLU_LIB) -lGL -lXmu -lX11 $(EXTRA_LIBS) -lm 
+         $(GLU_LIB) -lGL -lXmu -lX11 $(EXTRA_LIBS) -lm -lminizip
 
 all : $(EXEC)
 endif
Index: TerrainApps/prSimple/Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/prSimple/Makefile	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/prSimple/Makefile	(revision 58+:977e8908786d+)
@@ -58,7 +58,7 @@
 LIBS   = -lvtosg -lvtdata \
          -lgdal -losgDB -losgUtil -losgText -losg -lProducer -lOpenThreads -lnetcdf \
 		 -lxmlhelper -lunzip $(MINI_LIB) \
-         $(GLUT_LIB) $(GLU_LIB) -lGL -lXmu -lX11 $(EXTRA_LIBS) -lcurl -lbz2 -lm 
+         $(GLUT_LIB) $(GLU_LIB) -lGL -lXmu -lX11 $(EXTRA_LIBS) -lcurl -lbz2 -lm -lminizip
 
 all : $(EXEC)
 endif
Index: TerrainApps/sdlSimple/Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/sdlSimple/Makefile	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/sdlSimple/Makefile	(revision 58+:977e8908786d+)
@@ -40,7 +40,7 @@
          -lgdal -losgDB -losgUtil -losgText -losgParticle -losg \
 	 -lxmlhelper -lunzip $(MINI_LIB) \
          `sdl-config --libs` \
-         $(GLU_LIB) -lGL -lXmu -lX11 $(EXTRA_LIBS) -lm 
+         $(GLU_LIB) -lGL -lXmu -lX11 $(EXTRA_LIBS) -lm -lminizip
 
 all : $(EXEC)
 
Index: TerrainApps/Simple/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/Simple/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/Simple/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -65,6 +65,9 @@
 	target_link_libraries(Simple ${BZIP2_LIBRARIES})
 endif(BZIP2_FOUND)
 
+target_link_libraries(Simple ${SQUISH_LIBRARY})
+
+
 
 
 
Index: TerrainApps/VTBuilder/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/VTBuilder/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/VTBuilder/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -64,6 +64,8 @@
 install(TARGETS VTBuilder RUNTIME DESTINATION bin
                           BUNDLE DESTINATION bin)
 
+install(TARGETS BuilderLib LIBRARY DESTINATION lib)
+
 # Internal dependencies for this target
 target_link_libraries(VTBuilder BuilderLib vtui vtdata xmlhelper minidata unzip)
 
Index: TerrainApps/VTBuilder/ElevLayer.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/VTBuilder/ElevLayer.cpp	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/VTBuilder/ElevLayer.cpp	(revision 58+:977e8908786d+)
@@ -36,8 +36,8 @@
 #if SUPPORT_QUIKGRID
   #include "vtdata/QuikGrid.h"
   // QuikGrid includes
-  #include "scatdata.h"
-  #include "xpand.h"
+  #include <quikgrid/scatdata.h>
+  #include <quikgrid/xpand.h>
 #endif
 
 
Index: TerrainApps/VTBuilder/vtImage.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/VTBuilder/vtImage.cpp	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/VTBuilder/vtImage.cpp	(revision 58+:977e8908786d+)
@@ -499,8 +499,8 @@
 	else
 	{
 		// check horizontal units or old and new terrain
-		const double units_old = pSource->GetLinearUnits(NULL);
-		const double units_new = pDest->GetLinearUnits(NULL);
+		const double units_old = pSource->GetLinearUnits(nullptr);
+		const double units_new = pDest->GetLinearUnits(nullptr);
 		new_step = old_step * (units_old / units_new);
 	}
 	const double fColumns = m_Extents.Width() / new_step.x;
Index: TerrainApps/vtTest/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/vtTest/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/vtTest/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -75,6 +75,8 @@
 	target_link_libraries(vtTest ${BZIP2_LIBRARIES})
 endif(BZIP2_FOUND)
 
+target_link_libraries(vtTest ${SQUISH_LIBRARY})
+
 
 
 
Index: TerrainApps/wxSimple/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainApps/wxSimple/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainApps/wxSimple/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -30,6 +30,9 @@
 	target_link_libraries(wxSimple ${wxWidgets_LIBRARIES})
 endif(wxWidgets_FOUND)
 
+target_link_libraries(wxSimple ${SQUISH_LIBRARY})
+
+
 if(GDAL_FOUND)
 	target_link_libraries(wxSimple ${GDAL_LIBRARIES})
 endif (GDAL_FOUND)
@@ -96,3 +99,6 @@
 if (GLEXT_INCLUDE_DIR)
 	include_directories(${GLEXT_INCLUDE_DIR})
 endif (GLEXT_INCLUDE_DIR)
+
+target_link_libraries(wxSimple ${SQUISH_LIBRARY})
+
Index: TerrainSDK/minidata/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/minidata/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/minidata/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -21,3 +21,4 @@
 	include_directories(${GDAL_INCLUDE_DIR})
 endif (GDAL_FOUND)
 
+install(TARGETS minidata LIBRARY DESTINATION lib)
\ No newline at end of file
Index: TerrainSDK/unzip/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/unzip/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/unzip/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -11,3 +11,5 @@
 
 # Specify preprocessor definitions for this target
 set_property(TARGET unzip APPEND PROPERTY COMPILE_DEFINITIONS NOUNCRYPT)
+
+install(TARGETS unzip LIBRARY DESTINATION lib)
\ No newline at end of file
Index: TerrainSDK/unzip/unzip.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/unzip/unzip.c	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/unzip/unzip.c	(revision 58+:977e8908786d+)
@@ -40,6 +40,7 @@
 #include <string.h>
 #include "zlib.h"
 #include "unzip.h"
+#include <quazip5/minizip_crypt.h>
 
 #ifdef STDC
 #  include <stddef.h>
Index: TerrainSDK/vtdata/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtdata/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtdata/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -17,7 +17,9 @@
 		StructArray.h Structure.h TagArray.h Triangulate.h TripDub.h Unarchive.h UtilityMap.h Version.h
 		Vocab.h vtDIB.h vtLog.h vtString.h vtTime.h vtTin.h vtUnzip.h WFSClient.h
 
-		triangle/triangle.c triangle/triangle.h)
+		triangle/triangle.c triangle/triangle.h ../unzip/unzip.c ../unzip/unzip.h ../unzip/ioapi.c ../unzip/ioapi.h
+		../xmlhelper/easyxml.cpp ../xmlhelper/easyxml.hpp ../xmlhelper/exception.cpp ../xmlhelper/exception.hpp
+		../xmlhelper/widestring.cpp ../xmlhelper/widestring.h)
 
 if(ZLIB_FOUND)
 	include_directories(${ZLIB_INCLUDE_DIR})
@@ -59,5 +61,13 @@
 	include_directories(${QUIKGRID_INCLUDE_DIR})
 	message(QUIKGRID_INCLUDE_DIR)
 	message(${QUIKGRID_INCLUDE_DIR})
+	target_link_libraries(vtdata ${QUIKGRID_LIBRARIES})
 endif(QUIKGRID_FOUND)
 
+if (MINIZIP_FOUND)
+	include_directories(${MINIZIP_INCLUDE_DIR})
+	target_link_libraries(vtdata ${MINIZIP_LIBRARY})
+	message(${MINIZIP_INCLUDE_DIR})
+endif(MINIZIP_FOUND)
+
+install(TARGETS vtdata LIBRARY DESTINATION lib)
\ No newline at end of file
Index: TerrainSDK/vtdata/ElevationGrid.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtdata/ElevationGrid.cpp	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtdata/ElevationGrid.cpp	(revision 58+:977e8908786d+)
@@ -315,8 +315,8 @@
 	else
 	{
 		// check horizontal units or old and new terrain
-		double units_old = pSource->GetLinearUnits(NULL);
-		double units_new = pDest->GetLinearUnits(NULL);
+		double units_old = pSource->GetLinearUnits(nullptr);
+		double units_new = pDest->GetLinearUnits(nullptr);
 		new_step = old_step * (units_old / units_new);
 	}
 	const double fColumns = m_EarthExtents.Width() / new_step.x;
Index: TerrainSDK/vtdata/MathTypes.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtdata/MathTypes.h	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtdata/MathTypes.h	(revision 58+:977e8908786d+)
@@ -17,15 +17,13 @@
 #include "vtdata/config_vtdata.h"
 #include "Array.h"
 
-#ifndef PId
- #define PId	3.14159265358979323846264338
- #define PIf	3.14159265358979323846264338f
- #define PI2d	6.28318530717958647692528676
- #define PI2f	6.28318530717958647692528676f
- #define PID2d	1.57079632679489661923132169
- #define PID2f	1.57079632679489661923132169f
- #define PID3d	1.04719755119659774615421446
-#endif
+const double PId = 3.14159265358979323846264338;
+const float PIf = 3.14159265358979323846264338f;
+const double PI2d = 6.28318530717958647692528676;
+const float PI2f = 6.28318530717958647692528676f;
+const double PID2d = 1.57079632679489661923132169;
+const float PID2f = 1.57079632679489661923132169f;
+const double PID3d = 1.04719755119659774615421446;
 
 #ifndef NULL
 #define NULL	0
Index: TerrainSDK/vtdata/QuikGrid.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtdata/QuikGrid.h	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtdata/QuikGrid.h	(revision 58+:977e8908786d+)
@@ -18,8 +18,8 @@
 #if SUPPORT_QUIKGRID
 
 // QuikGrid headers
-#include "surfgrid.h"
-#include "contour.h"
+#include <quikgrid/surfgrid.h>
+#include <quikgrid/contour.h>
 
 #include "HeightField.h"
 #include "Features.h"
Index: TerrainSDK/vtdata/vtCRS.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtdata/vtCRS.cpp	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtdata/vtCRS.cpp	(revision 58+:977e8908786d+)
@@ -12,6 +12,8 @@
 #include "vtLog.h"
 #include "Icosa.h"
 #include "FilePath.h"
+#include <ogr_spatialref.h>
+#include <proj.h>
 
 // GDAL
 #include "cpl_csv.h"
@@ -987,7 +989,120 @@
  * The subclassing is used to implement the Transform() method which does
  * the additional Dymaxion conversion.
  */
-class DymaxOCT : public OCTransform
+class OGRProjCT : public OGRCoordinateTransformation
+{
+    CPL_DISALLOW_COPY_ASSIGN(OGRProjCT)
+
+    OGRSpatialReference *poSRSSource = nullptr;
+    bool        bSourceLatLong = false;
+    bool        bSourceWrap = false;
+    double      dfSourceWrapLong = 0.0;
+
+    OGRSpatialReference *poSRSTarget = nullptr;
+    bool        bTargetLatLong = false;
+    bool        bTargetWrap = false;
+    double      dfTargetWrapLong = 0.0;
+
+    bool        bWebMercatorToWGS84LongLat = false;
+
+    int         nErrorCount = 0;
+
+    bool        bCheckWithInvertProj = false;
+    double      dfThreshold = 0.0;
+
+    PJ*         m_pj = nullptr;
+    bool        m_bReversePj = false;
+
+    int         nMaxCount = 0;
+    double     *padfOriX = nullptr;
+    double     *padfOriY = nullptr;
+    double     *padfOriZ = nullptr;
+    double     *padfOriT = nullptr;
+    double     *padfTargetX = nullptr;
+    double     *padfTargetY = nullptr;
+    double     *padfTargetZ = nullptr;
+    double     *padfTargetT = nullptr;
+
+    bool        m_bEmitErrors = true;
+
+    bool        bNoTransform = false;
+
+    enum class Strategy
+    {
+        PROJ,
+        BEST_ACCURACY,
+        FIRST_MATCHING
+    };
+    Strategy    m_eStrategy = Strategy::PROJ;
+
+    bool        ListCoordinateOperations(const char* pszSrcSRS,
+                                         const char* pszTargetSRS,
+                                         const OGRCoordinateTransformationOptions& options );
+
+    struct Transformation
+    {
+        double minx = 0.0;
+        double miny = 0.0;
+        double maxx = 0.0;
+        double maxy = 0.0;
+        PJ* pj = nullptr;
+        CPLString osName{};
+        CPLString osProjString{};
+        double accuracy = 0.0;
+
+        Transformation(double minxIn, double minyIn, double maxxIn, double maxyIn,
+                       PJ* pjIn,
+                       const CPLString& osNameIn,
+                       const CPLString& osProjStringIn,
+                       double accuracyIn):
+                minx(minxIn), miny(minyIn), maxx(maxxIn), maxy(maxyIn),
+                pj(pjIn), osName(osNameIn), osProjString(osProjStringIn),
+                accuracy(accuracyIn) {}
+
+        Transformation(const Transformation&) = delete;
+        Transformation(Transformation&& other):
+                minx(other.minx), miny(other.miny), maxx(other.maxx), maxy(other.maxy),
+                pj(other.pj), osName(std::move(other.osName)),
+                osProjString(std::move(other.osProjString)),
+                accuracy(other.accuracy)
+        {
+            other.pj = nullptr;
+        }
+        Transformation& operator=(const Transformation&) = delete;
+
+        ~Transformation()
+        {
+            if( pj )
+            {
+                proj_assign_context(pj, OSRGetProjTLSContext());
+                proj_destroy(pj);
+            }
+        }
+    };
+    std::vector<Transformation> m_oTransformations{};
+    int m_iCurTransformation = -1;
+
+public:
+    OGRProjCT();
+    ~OGRProjCT() override;
+
+    int         Initialize( const OGRSpatialReference *poSource,
+                            const OGRSpatialReference *poTarget,
+                            const OGRCoordinateTransformationOptions& options );
+
+    OGRSpatialReference *GetSourceCS() override;
+    OGRSpatialReference *GetTargetCS() override;
+
+    int Transform( int nCount,
+                   double *x, double *y, double *z, double *t,
+                   int *panSuccess ) override;
+
+    bool GetEmitErrors() const override { return m_bEmitErrors; }
+    void SetEmitErrors( bool bEmitErrors ) override
+    { m_bEmitErrors = bEmitErrors; }
+};
+
+class DymaxOCT : public OGRProjCT
 {
 public:
 	DymaxOCT()
Index: TerrainSDK/vtdata/vtCRS.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtdata/vtCRS.h	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtdata/vtCRS.h	(revision 58+:977e8908786d+)
@@ -27,6 +27,8 @@
 #define EPSG_DATUM_WGS72		6322
 #define EPSG_DATUM_WGS84		6326
 
+#include <ogr_proj_p.h>
+#include <proj_experimental.h>
 #include "ogr_spatialref.h"
 #include "MathTypes.h"
 #include "Units.h"
Index: TerrainSDK/vtlib/vtosg/ExternalHeightField3d.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtlib/vtosg/ExternalHeightField3d.cpp	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtlib/vtosg/ExternalHeightField3d.cpp	(revision 58+:977e8908786d+)
@@ -7,6 +7,7 @@
 #include "ExternalHeightField3d.h"
 #ifdef USE_OSGEARTH
 #include <osgEarth/MapNode>
+#include <osgEarth/MapFrame>
 #endif
 
 
@@ -65,8 +66,8 @@
 		// Place the Terrain Geometry under the transform
 		transform->addChild(pNode);
 
-		m_pElevationManager = new osgEarth::Util::ElevationManager(pMap);
-		osgEarth::MapFrame MapFrame(pMap, osgEarth::Map::ELEVATION_LAYERS);
+		m_pMap = pMap;
+		osgEarth::MapFrame MapFrame(pMap);
 
 		MapFrame.sync();
 		int TileSizeInHeixels = 0;
@@ -82,7 +83,7 @@
                 TileSizeInHeixels = layerTileSize;
 
             // we also need the maximum available data level.
-            uint layerMaxDataLevel = i->get()->getMaxDataLevel();
+            uint layerMaxDataLevel = i->get()->getMaxValidValue();
             if ( layerMaxDataLevel > MaxLOD )
                 MaxLOD = layerMaxDataLevel;
         }
@@ -213,8 +214,19 @@
         double Resolution;
         double Elevation;
         double Requested_Resolution = bTrue ? 0 : m_CompromiseResolution;
-		bool bRet = m_pElevationManager->getElevation(Model.x(), Model.y(), Requested_Resolution, NULL, Elevation, Resolution);
-		fAltitude = (float)Elevation;
+
+        unsigned lod = 23; // default lod
+        if (Requested_Resolution > 0.0)
+        {
+            unsigned tileSize = m_pMap->getElevationPool()->getTileSize();
+            int level = m_pMap->getProfile()->getLevelOfDetailForHorizResolution(Requested_Resolution, tileSize);
+            if (level > 0)
+                lod = level;
+        }
+
+        osg::ref_ptr<osgEarth::ElevationEnvelope> env = m_pMap->getElevationPool()->createEnvelope(m_pMap->getSRS(), lod);
+        fAltitude = env->getElevation(Model.x(), Model.y());
+        bool bRet = fAltitude;
 		return bRet;
 #else
 		return false;
Index: TerrainSDK/vtlib/vtosg/ExternalHeightField3d.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtlib/vtosg/ExternalHeightField3d.h	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtlib/vtosg/ExternalHeightField3d.h	(revision 58+:977e8908786d+)
@@ -10,7 +10,8 @@
 #include "vtdata/HeightField.h"
 #include <osg/Node>
 #ifdef USE_OSGEARTH
-#include <osgEarthUtil/ElevationManager>
+#include <osgEarth/Map>
+
 #endif
 
 class vtGeode;
@@ -51,7 +52,7 @@
 	bool					m_bOsgEarth;
 
 #ifdef USE_OSGEARTH
-	osg::ref_ptr<osgEarth::Util::ElevationManager> m_pElevationManager;
+	osg::ref_ptr<osgEarth::Map> m_pMap;
 	float					m_ResolutionAtLevel0;
 	float					m_CompromiseResolution;
 #endif
Index: TerrainSDK/vtlib/vtosg/NodeOSG.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtlib/vtosg/NodeOSG.cpp	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtlib/vtosg/NodeOSG.cpp	(revision 58+:977e8908786d+)
@@ -1557,7 +1557,6 @@
 	v2s(box.min, _boundingBox._min);
 	v2s(box.max, _boundingBox._max);
 
-	_boundingBoxComputed=true;
 	return _boundingBox;
 }
 
@@ -1850,7 +1849,8 @@
 ///////////////////////////////////////////////////////////////////////
 // Intersection methods
 
-#include <osgUtil/IntersectVisitor>
+#include <osgUtil/IntersectionVisitor>
+#include <osg/LineSegment>
 
 /**
  * Check for surface intersections along a line segment in space.
@@ -1876,17 +1876,10 @@
 				vtHitList &hitlist, bool bLocalCoords, bool bNativeNodes)
 {
 	// set up intersect visitor and create the line segment
-	osgUtil::IntersectVisitor visitor;
-	osgUtil::IntersectVisitor::HitList hlist;
-
-	osg::ref_ptr<osg::LineSegment> segment = new osg::LineSegment;
-	segment->set(v2s(start), v2s(end));
-	visitor.addLineSegment(segment.get());
+	osgUtil::LineSegmentIntersector visitor(v2s(start), v2s(end));
 
 	// the accept() method does the intersection testing work
-	pTop->accept(visitor);
-
-	hlist = visitor.getHitList(segment.get());
+    osgUtil::LineSegmentIntersector::Intersections hlist = visitor.getIntersections();
 
 #if 0	// Diagnostic code
 	for(osgUtil::IntersectVisitor::HitList::iterator hitr=hlist.begin();
@@ -1915,15 +1908,15 @@
 #endif
 
 	// look through the node hits that OSG returned
-	for(osgUtil::IntersectVisitor::HitList::iterator hitr=hlist.begin();
+	for(osgUtil::LineSegmentIntersector::Intersections::iterator hitr = hlist.begin();
 		hitr!=hlist.end(); ++hitr)
 	{
-		if (!hitr->_geode.valid())
-			continue;
+        auto geode = dynamic_cast<osg::Geode*>(hitr->nodePath.back());
 
 		// put it on the list of hit results
 		vtHit hit;
-		hit.geode = hitr->_geode.get();
+
+		hit.geode = geode;
 		if (bLocalCoords)
 		{
 			hit.point = s2v(hitr->getLocalIntersectPoint());
Index: TerrainSDK/vtlib/vtosg/SimpleInterimShadowTechnique.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtlib/vtosg/SimpleInterimShadowTechnique.cpp	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtlib/vtosg/SimpleInterimShadowTechnique.cpp	(revision 58+:977e8908786d+)
@@ -46,7 +46,7 @@
 }
 
 CSimpleInterimShadowTechnique::CSimpleInterimShadowTechnique(const CSimpleInterimShadowTechnique& copy, const osg::CopyOp& copyop):
-    ShadowTechnique(copy,copyop),
+    ShadowMap(copy,copyop),
     m_ShadowTextureUnit(copy.m_ShadowTextureUnit)
 {
 }
Index: TerrainSDK/vtlib/vtosg/SimpleInterimShadowTechnique.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtlib/vtosg/SimpleInterimShadowTechnique.h	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtlib/vtosg/SimpleInterimShadowTechnique.h	(revision 58+:977e8908786d+)
@@ -14,7 +14,7 @@
 
 #include <osg/Camera>
 #include <osg/Material>
-#include <osgShadow/ShadowTechnique>
+#include <osgShadow/ShadowMap>
 
 #if VTDEBUGSHADOWS
 #include "vtlib/core/GeomUtil.h"
@@ -24,7 +24,7 @@
 class vtLodGrid;
 
 /** CSimpleInterimShadowTechnique provides an implementation of a depth map shadow tuned to the needs of VTP.*/
-class CSimpleInterimShadowTechnique : public osgShadow::ShadowTechnique
+class CSimpleInterimShadowTechnique : public osgShadow::ShadowMap
 {
 public:
 	CSimpleInterimShadowTechnique();
Index: TerrainSDK/vtlib/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtlib/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtlib/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -4,3 +4,5 @@
 endif(VTP_USE_EXPERIMENTAL_BUILDING_GEOMETRY_GENERATOR)
 add_subdirectory(core)
 add_subdirectory(vtosg)
+
+install(TARGETS vtlib LIBRARY DESTINATION lib)
\ No newline at end of file
Index: TerrainSDK/vtui/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/vtui/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/vtui/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -36,3 +36,5 @@
 if(QUIKGRID_FOUND)
 	include_directories(${QUIKGRID_INCLUDE_DIR})
 endif(QUIKGRID_FOUND)
+
+install(TARGETS vtui LIBRARY DESTINATION lib)
Index: TerrainSDK/wxosg/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/wxosg/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/wxosg/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -33,3 +33,4 @@
 	include_directories(${OSG_INSTALL_DIR}/include)
 endif(OSG_FOUND)
 
+install(TARGETS wxosg LIBRARY DESTINATION lib)
\ No newline at end of file
Index: TerrainSDK/xmlhelper/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/xmlhelper/CMakeLists.txt	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/xmlhelper/CMakeLists.txt	(revision 58+:977e8908786d+)
@@ -8,3 +8,5 @@
 if(ZLIB_FOUND)
 	include_directories(${ZLIB_INCLUDE_DIR})
 endif(ZLIB_FOUND)
+
+install(TARGETS xmlhelper LIBRARY DESTINATION lib)
\ No newline at end of file
Index: TerrainSDK/xmlhelper/widestring.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TerrainSDK/xmlhelper/widestring.cpp	(revision 58:977e8908786d3a656fa71cda93ac1908addcd458)
+++ TerrainSDK/xmlhelper/widestring.cpp	(revision 58+:977e8908786d+)
@@ -4,6 +4,7 @@
 
 #include "widestring.h"
 #include <cstdlib>
+#include <cstring>
 
 #if __GNUC__ == 4 && __GNUC_MINOR__ >= 3
   #include <cstring>
